###########################################################
# exploitdb.py
# File that contains code block related to ExploitDB.
# DetExploit (https://github.com/moppoi5168/DetExploit)
# Licensed by GPL License
###########################################################

from termcolor import cprint

import colorama
import configparser
import os
import urllib.request

import report

cp = configparser.ConfigParser()
cp.read('./config.ini', 'UTF-8')
EXPLOITDB_FILENAME = cp.get('exploitdb', 'vulndata_filename')


def download_vulndata():
    print('   Downloading vulnerability data from ExploitDB GitHub repo.')
    url = 'https://github.com/offensive-security/exploitdb/raw/master/files_exploits.csv'
    mem = urllib.request.urlopen(url).read()
    with open(EXPLOITDB_FILENAME, mode='wb') as f:
        f.write(mem)
    if os.path.isfile(EXPLOITDB_FILENAME):
        cprint('   Download complete.', 'green')
        print('===========================================================')
        return 0
    else:
        cprint('   Error: Download failed.', 'red')
        exit(1)


def extract_windows_exploit():
    print('   Extracting Windows platform exploit from ' + EXPLOITDB_FILENAME + '......')
    tmp = []
    with open(EXPLOITDB_FILENAME, encoding="utf-8_sig") as wc:
        line = wc.readline()
        while line:
            if 'windows' in line:
                tmp.append(line)
            line = wc.readline()
    cprint('   Extracted successfully.', 'green')
    print('===========================================================')
    return tmp


def parse_vulndata(data_list):
    product_dict = {}
    for data in data_list:
        splitted = data.split(',')
        title = splitted[2]
        base = title.split(' - ')[0][1:]
        baselist = base.split(' ')
        name = ' '.join(baselist[:-1])
        version = baselist[-1]
        product_dict[name] = version
    return product_dict


def scan(exploitdb_product_dict, data):
    count = 0
    resultdict = {}
    for key in exploitdb_product_dict:
        name = key
        version = exploitdb_product_dict[key]
        try:
            tmp = data[name]
        except KeyError:
            continue
        if data[name] == version:
            level = report.determine_level('ExploitDB')
            resultdict[name] = (version, True, False, False, level)
            print('======================================================')
            cprint('   << ALERT :: VULNERABLE APPLICATION DETECTED >>', 'red')
            cprint('   << Application Name: ' + name + ' >>', 'blue')
            cprint('   << Application Version: ' + version + ' >>', 'blue')
            cprint('   << Used database: ExploitDB', 'blue')
            cprint('   << Level: ' + level + ' >>', 'blue')
            print('======================================================')
            count = count + 1
    return resultdict, count


if __name__ == '__main__':
    colorama.init()
    print('======================================================')
    cprint('   ERROR: Direct execution of exploitdb.py detected', 'red')
    cprint('   ERROR: Please run the following to run DetExploit.', 'red')
    cprint('   ERROR: -> main.py for CUI version', 'red')
    cprint('   ERROR: -> gui.py for GUI version', 'red')
    print('======================================================')
